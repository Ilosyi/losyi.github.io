#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define N 100
typedef int ElemType;
typedef struct TWSTACK {
    ElemType elem[N];
    int top1, top2;
} TWSTACK;
//在下面的begin和end间填写相应代码
void inistack(TWSTACK& S)
//该函数实现初始化S，得到2个空栈。根据双向栈的示意图，理解初始化要求。
{
    S.top1 = 0;
    S.top2 = N - 1;
}
int push(TWSTACK& S, int i, ElemType e)
//i取值1或2，分别对应左或右栈，将元素e压入S的对应栈。成功入栈返回1，否则返回0
{
    /***************begin***************/
    if (S.top1 > S.top2) return 0;
    if (i == 1)
    {
        S.elem[S.top1++] = e;
    }
    if (i == 2)
    {
        S.elem[S.top2--] = e;
    }
    return 1;
    /*************** end ***************/
}
int pop(TWSTACK& S, int i, ElemType& e)
//i取值1或2，分别对应左或右栈，将S对应栈的栈顶元素出栈，赋值给e。成功出栈返回1，否则返回0
{
    /***************begin***************/
    if (i == 1)   {
        if (S.top1 == 0) return 0;
        else {
            e = S.elem[--S.top1];
        }
    }
    if (i == 2)
    {
        if (S.top2 == N - 1) return 0;
        else {
            e = S.elem[++S.top2];
        }
    }
    return 1;
    /*************** end ***************/
}
int isPalindrome(char* str)
//判断字符串str是否回文，是则返回1，否则返回0
{
	/**********begin**********/
    
        TWSTACK S;
        inistack(S); // 初始化双向栈

        int len = strlen(str)-1;
        // 将字符串逐个字符压入左栈和右栈
        for (int i = 0; i < len; i++) {
            push(S, 1, str[i]); // 左栈压入字符
            push(S, 2, str[len - 1 - i]); // 右栈压入字符，逆序
        }

        // 依次弹出左栈和右栈中的字符进行比较
        ElemType char1, char2;
        while (pop(S, 1, char1) && pop(S, 2, char2)) {
            if (char1 != char2) {
                return 0; // 如果有字符不相同，返回0
            }
        }
    
    return 1; // 如果所有字符都相同，返回1
	/********** end **********/
} 
int main()
{
        char* s = (char*)malloc(sizeof(char) * 100);
        fgets(s,100,stdin);
        printf("%d", isPalindrome(s));
        return 0;
}
